/**
 * @file ThemeIntegration.js
 * @description –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–ª–æ–π –¥–ª—è —Å–≤—è–∑–∏ —Å–∏—Å—Ç–µ–º—ã —Ç–µ–º —Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ UI
 * @module ui/ThemeIntegration
 */

const ThemeManager = require('./ThemeManager');

/**
 * –ö–ª–∞—Å—Å –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã —Ç–µ–º —Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ UI
 */
class ThemeIntegration {
  /**
   * –°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä–∞ —Ç–µ–º
   * @param {Object} options - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
   * @param {Object} options.eventEmitter - –°–∏—Å—Ç–µ–º–∞ —Å–æ–±—ã—Ç–∏–π
   * @param {Object} options.logger - –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
   * @param {Object} options.config - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
   * @param {Object} options.storage - –•—Ä–∞–Ω–∏–ª–∏—â–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
   */
  constructor(options = {}) {
    this.eventEmitter = options.eventEmitter || {
      emit: () => {},
      on: () => {},
      off: () => {}
    };
    this.logger = options.logger || console;
    this.config = options.config || {};
    this.storage = options.storage || {
      getItem: () => null,
      setItem: () => {},
      removeItem: () => {}
    };
    
    // –ú–µ–Ω–µ–¥–∂–µ—Ä —Ç–µ–º
    this.themeManager = null;
    
    // –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    this.components = new Map();
    
    // –§–ª–∞–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    this.isInitialized = false;
    
    // –ü—Ä–∏–≤—è–∑–∫–∞ –º–µ—Ç–æ–¥–æ–≤ –∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
    this.handleThemeChanged = this.handleThemeChanged.bind(this);
    this.handleAutoModeChanged = this.handleAutoModeChanged.bind(this);
  }
  
  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä —Ç–µ–º
   * @returns {ThemeIntegration} –≠–∫–∑–µ–º–ø–ª—è—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä–∞ —Ç–µ–º
   */
  initialize() {
    if (this.isInitialized) {
      this.logger.warn('ThemeIntegration: already initialized');
      return this;
    }
    
    this.logger.info('ThemeIntegration: initializing');
    
    // –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Ç–µ–º
    this.themeManager = new ThemeManager({
      eventEmitter: this.eventEmitter,
      logger: this.logger,
      config: this.config.themeManager,
      storage: this.storage
    });
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Ç–µ–º
    this.themeManager.initialize();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    this.addEventListeners();
    
    // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ–º–∞–º–∏
    this.createThemeControls();
    
    this.isInitialized = true;
    this.eventEmitter.emit('themeIntegration:initialized');
    
    return this;
  }
  
  /**
   * –î–æ–±–∞–≤–ª—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
   * @private
   */
  addEventListeners() {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º—ã
    this.eventEmitter.on('themeManager:themeChanged', this.handleThemeChanged);
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–∂–∏–º–∞
    this.eventEmitter.on('themeManager:autoModeChanged', this.handleAutoModeChanged);
  }
  
  /**
   * –£–¥–∞–ª—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
   * @private
   */
  removeEventListeners() {
    this.eventEmitter.off('themeManager:themeChanged', this.handleThemeChanged);
    this.eventEmitter.off('themeManager:autoModeChanged', this.handleAutoModeChanged);
  }
  
  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º—ã
   * @param {Object} data - –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
   * @private
   */
  handleThemeChanged(data) {
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    for (const [id, component] of this.components) {
      this.updateComponentTheme(id, component, data.theme);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ–º–∞–º–∏
    this.updateThemeControls();
  }
  
  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–∂–∏–º–∞
   * @param {Object} data - –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
   * @private
   */
  handleAutoModeChanged(data) {
    // –û–±–Ω–æ–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ–º–∞–º–∏
    this.updateThemeControls();
  }
  
  /**
   * –°–æ–∑–¥–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ–º–∞–º–∏
   * @private
   */
  createThemeControls() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    if (!this.config.createControls) {
      return;
    }
    
    // –ù–∞—Ö–æ–¥–∏–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    let container = document.querySelector(this.config.controlsContainer || '#theme-controls');
    
    if (!container) {
      container = document.createElement('div');
      container.id = 'theme-controls';
      container.className = 'theme-controls';
      document.body.appendChild(container);
    }
    
    // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    container.innerHTML = '';
    
    // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ç–µ–º—ã
    const themeToggle = document.createElement('button');
    themeToggle.id = 'theme-toggle';
    themeToggle.className = 'theme-toggle';
    themeToggle.setAttribute('aria-label', '–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ç–µ–º—É');
    themeToggle.innerHTML = this.themeManager.isDarkTheme() ? 
      '<span class="theme-toggle-icon">‚òÄÔ∏è</span>' : 
      '<span class="theme-toggle-icon">üåô</span>';
    
    themeToggle.addEventListener('click', () => {
      this.themeManager.toggleTheme();
    });
    
    container.appendChild(themeToggle);
    
    // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–∂–∏–º–∞
    const autoModeToggle = document.createElement('button');
    autoModeToggle.id = 'auto-mode-toggle';
    autoModeToggle.className = 'auto-mode-toggle';
    autoModeToggle.setAttribute('aria-label', '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º');
    autoModeToggle.innerHTML = this.themeManager.isAutoMode() ? 
      '<span class="auto-mode-toggle-icon">üîÑ</span>' : 
      '<span class="auto-mode-toggle-icon">‚öôÔ∏è</span>';
    
    autoModeToggle.addEventListener('click', () => {
      this.themeManager.setAutoMode(!this.themeManager.isAutoMode());
    });
    
    container.appendChild(autoModeToggle);
    
    // –°–æ–∑–¥–∞–µ–º –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ —Ç–µ–º
    const themeSelect = document.createElement('select');
    themeSelect.id = 'theme-select';
    themeSelect.className = 'theme-select';
    themeSelect.setAttribute('aria-label', '–í—ã–±—Ä–∞—Ç—å —Ç–µ–º—É');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–µ–º—ã
    const availableThemes = this.themeManager.getAvailableThemes();
    const currentThemeId = this.themeManager.getCurrentThemeId();
    
    for (const theme of availableThemes) {
      const option = document.createElement('option');
      option.value = theme.id;
      option.textContent = theme.name;
      option.selected = theme.id === currentThemeId;
      themeSelect.appendChild(option);
    }
    
    themeSelect.addEventListener('change', () => {
      this.themeManager.setTheme(themeSelect.value);
    });
    
    container.appendChild(themeSelect);
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    const style = document.createElement('style');
    style.textContent = `
      .theme-controls {
        display: flex;
        align-items: center;
        gap: 10px;
        padding: 5px;
      }
      
      .theme-toggle, .auto-mode-toggle {
        background: none;
        border: none;
        cursor: pointer;
        font-size: 1.5rem;
        padding: 5px;
        border-radius: var(--border-radius-medium, 5px);
        transition: background-color var(--transition-fast, 0.15s ease);
      }
      
      .theme-toggle:hover, .auto-mode-toggle:hover {
        background-color: var(--color-backgroundAlt, #f5f5f5);
      }
      
      .theme-select {
        padding: 5px;
        border-radius: var(--border-radius-small, 3px);
        border: 1px solid var(--color-border, #dddddd);
        background-color: var(--color-background, #ffffff);
        color: var(--color-text, #333333);
      }
    `;
    
    document.head.appendChild(style);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    this.controls = {
      container,
      themeToggle,
      autoModeToggle,
      themeSelect
    };
  }
  
  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ–º–∞–º–∏
   * @private
   */
  updateThemeControls() {
    if (!this.controls) {
      return;
    }
    
    const { themeToggle, autoModeToggle, themeSelect } = this.controls;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ç–µ–º—ã
    if (themeToggle) {
      themeToggle.innerHTML = this.themeManager.isDarkTheme() ? 
        '<span class="theme-toggle-icon">‚òÄÔ∏è</span>' : 
        '<span class="theme-toggle-icon">üåô</span>';
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–∂–∏–º–∞
    if (autoModeToggle) {
      autoModeToggle.innerHTML = this.themeManager.isAutoMode() ? 
        '<span class="auto-mode-toggle-icon">üîÑ</span>' : 
        '<span class="auto-mode-toggle-icon">‚öôÔ∏è</span>';
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ —Ç–µ–º
    if (themeSelect) {
      const currentThemeId = this.themeManager.getCurrentThemeId();
      
      for (const option of themeSelect.options) {
        option.selected = option.value === currentThemeId;
      }
    }
  }
  
  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
   * @param {string} id - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
   * @param {Object} component - –ö–æ–º–ø–æ–Ω–µ–Ω—Ç
   * @param {string} type - –¢–∏–ø –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
   * @returns {ThemeIntegration} –≠–∫–∑–µ–º–ø–ª—è—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä–∞ —Ç–µ–º
   */
  registerComponent(id, component, type = 'generic') {
    if (!this.isInitialized) {
      this.logger.warn('ThemeIntegration: not initialized');
      return this;
    }
    
    this.components.set(id, { component, type });
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Ç–µ–º—É –∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—É
    const currentTheme = this.themeManager.getCurrentTheme();
    
    if (currentTheme) {
      this.updateComponentTheme(id, { component, type }, currentTheme);
    }
    
    this.logger.debug(`ThemeIntegration: registered component "${id}" of type "${type}"`);
    
    return this;
  }
  
  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–º—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
   * @param {string} id - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
   * @param {Object} componentData - –î–∞–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
   * @param {Object} theme - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ–º—ã
   * @private
   */
  updateComponentTheme(id, componentData, theme) {
    const { component, type } = componentData;
    
    // –ï—Å–ª–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–º–µ–µ—Ç –º–µ—Ç–æ–¥ updateTheme, –≤—ã–∑—ã–≤–∞–µ–º –µ–≥–æ
    if (component.updateTheme && typeof component.updateTheme === 'function') {
      component.updateTheme(theme);
      return;
    }
    
    // –ï—Å–ª–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —è–≤–ª—è–µ—Ç—Å—è DOM-—ç–ª–µ–º–µ–Ω—Ç–æ–º
    if (component instanceof Element) {
      // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫–ª–∞—Å—Å—ã —Ç–µ–º
      component.classList.remove('theme-light', 'theme-dark');
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å —Ç–µ–∫—É—â–µ–π —Ç–µ–º—ã
      component.classList.add(theme.isDark ? 'theme-dark' : 'theme-light');
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è —Ç–∏–ø–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –∫–ª–∞—Å—Å—ã
      switch (type) {
        case 'toolbar':
          this.applyToolbarTheme(component, theme);
          break;
        case 'sidebar':
          this.applySidebarTheme(component, theme);
          break;
        case 'modal':
          this.applyModalTheme(component, theme);
          break;
        case 'card':
          this.applyCardTheme(component, theme);
          break;
        case 'button':
          this.applyButtonTheme(component, theme);
          break;
        case 'input':
          this.applyInputTheme(component, theme);
          break;
        case 'comic':
          this.applyComicTheme(component, theme);
          break;
        case 'editor':
          this.applyEditorTheme(component, theme);
          break;
        default:
          // –î–ª—è –æ–±—â–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø—Ä–∏–º–µ–Ω—è–µ–º –±–∞–∑–æ–≤—ã–µ —Å—Ç–∏–ª–∏
          this.applyGenericTheme(component, theme);
      }
    }
  }
  
  /**
   * –ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ç–µ–º—É –∫ –ø–∞–Ω–µ–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
   * @param {Element} element - DOM-—ç–ª–µ–º–µ–Ω—Ç
   * @param {Object} theme - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ–º—ã
   * @private
   */
  applyToolbarTheme(element, theme) {
    element.style.backgroundColor = theme.colors.toolbar;
    element.style.color = theme.colors.text;
    element.style.borderBottom = `1px solid ${theme.colors.border}`;
    element.style.boxShadow = theme.shadows.small;
  }
  
  /**
   * –ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ç–µ–º—É –∫ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
   * @param {Element} element - DOM-—ç–ª–µ–º–µ–Ω—Ç
   * @param {Object} theme - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ–º—ã
   * @private
   */
  applySidebarTheme(element, theme) {
    element.style.backgroundColor = theme.colors.sidebar;
    element.style.color = theme.colors.text;
    element.style.borderRight = `1px solid ${theme.colors.border}`;
  }
  
  /**
   * –ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ç–µ–º—É –∫ –º–æ–¥–∞–ª—å–Ω–æ–º—É –æ–∫–Ω—É
   * @param {Element} element - DOM-—ç–ª–µ–º–µ–Ω—Ç
   * @param {Object} theme - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ–º—ã
   * @private
   */
  applyModalTheme(element, theme) {
    element.style.backgroundColor = theme.colors.modal;
    element.style.color = theme.colors.text;
    element.style.border = `1px solid ${theme.colors.border}`;
    element.style.boxShadow = theme.shadows.large;
  }
  
  /**
   * –ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ç–µ–º—É –∫ –∫–∞—Ä—Ç–æ—á–∫–µ
   * @param {Element} element - DOM-—ç–ª–µ–º–µ–Ω—Ç
   * @param {Object} theme - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ–º—ã
   * @private
   */
  applyCardTheme(element, theme) {
    element.style.backgroundColor = theme.colors.card;
    element.style.color = theme.colors.text;
    element.style.border = `1px solid ${theme.colors.border}`;
    element.style.boxShadow = theme.shadows.small;
  }
  
  /**
   * –ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ç–µ–º—É –∫ –∫–Ω–æ–ø–∫–µ
   * @param {Element} element - DOM-—ç–ª–µ–º–µ–Ω—Ç
   * @param {Object} theme - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ–º—ã
   * @private
   */
  applyButtonTheme(element, theme) {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–Ω–æ–ø–∫–∏ –ø–æ –∫–ª–∞—Å—Å–∞–º
    const isPrimary = element.classList.contains('primary');
    const isDanger = element.classList.contains('danger');
    const isSuccess = element.classList.contains('success');
    
    if (isPrimary) {
      element.style.backgroundColor = theme.colors.buttonPrimary;
      element.style.color = theme.colors.textInverse;
    } else if (isDanger) {
      element.style.backgroundColor = theme.colors.buttonDanger;
      element.style.color = theme.colors.textInverse;
    } else if (isSuccess) {
      element.style.backgroundColor = theme.colors.buttonSuccess;
      element.style.color = theme.colors.textInverse;
    } else {
      element.style.backgroundColor = theme.colors.buttonSecondary;
      element.style.color = theme.colors.text;
    }
    
    element.style.border = 'none';
    element.style.borderRadius = theme.borderRadius.small;
    element.style.transition = theme.transitions.fast;
  }
  
  /**
   * –ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ç–µ–º—É –∫ –ø–æ–ª—é –≤–≤–æ–¥–∞
   * @param {Element} element - DOM-—ç–ª–µ–º–µ–Ω—Ç
   * @param {Object} theme - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ–º—ã
   * @private
   */
  applyInputTheme(element, theme) {
    element.style.backgroundColor = theme.isDark ? theme.colors.backgroundElevated : theme.colors.background;
    element.style.color = theme.colors.text;
    element.style.border = `1px solid ${theme.colors.border}`;
    element.style.borderRadius = theme.borderRadius.small;
  }
  
  /**
   * –ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ç–µ–º—É –∫ –∫–æ–º–∏–∫—Å—É
   * @param {Element} element - DOM-—ç–ª–µ–º–µ–Ω—Ç
   * @param {Object} theme - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ–º—ã
   * @private
   */
  applyComicTheme(element, theme) {
    element.style.backgroundColor = theme.colors.comicBackground;
    element.style.color = theme.colors.comicText;
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏ –∫ –ø–∞–Ω–µ–ª—è–º –∫–æ–º–∏–∫—Å–∞
    const panels = element.querySelectorAll('.comic-panel');
    panels.forEach(panel => {
      panel.style.backgroundColor = theme.colors.comicPanel;
      panel.style.border = `1px solid ${theme.colors.comicBorder}`;
    });
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏ –∫ –ø—É–∑—ã—Ä—è–º —Å —Ç–µ–∫—Å—Ç–æ–º
    const bubbles = element.querySelectorAll('.comic-bubble');
    bubbles.forEach(bubble => {
      bubble.style.backgroundColor = theme.colors.comicBubble;
      bubble.style.color = theme.colors.comicText;
      bubble.style.border = `1px solid ${theme.colors.comicBorder}`;
    });
  }
  
  /**
   * –ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ç–µ–º—É –∫ —Ä–µ–¥–∞–∫—Ç–æ—Ä—É
   * @param {Element} element - DOM-—ç–ª–µ–º–µ–Ω—Ç
   * @param {Object} theme - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ–º—ã
   * @private
   */
  applyEditorTheme(element, theme) {
    element.style.backgroundColor = theme.colors.editorBackground;
    element.style.color = theme.colors.text;
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏ –∫ –ø–∞–Ω–µ–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
    const toolbar = element.querySelector('.editor-toolbar');
    if (toolbar) {
      toolbar.style.backgroundColor = theme.colors.editorToolbar;
      toolbar.style.borderBottom = `1px solid ${theme.colors.border}`;
    }
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏ –∫ –æ–±–ª–∞—Å—Ç–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const editArea = element.querySelector('.editor-area');
    if (editArea) {
      editArea.style.backgroundColor = theme.colors.editorBackground;
      editArea.style.color = theme.colors.text;
    }
  }
  
  /**
   * –ü—Ä–∏–º–µ–Ω—è–µ—Ç –±–∞–∑–æ–≤—ã–µ —Å—Ç–∏–ª–∏ –∫ –æ–±—â–∏–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º
   * @param {Element} element - DOM-—ç–ª–µ–º–µ–Ω—Ç
   * @param {Object} theme - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ–º—ã
   * @private
   */
  applyGenericTheme(element, theme) {
    element.style.backgroundColor = theme.colors.background;
    element.style.color = theme.colors.text;
  }
  
  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä —Ç–µ–º
   * @returns {ThemeManager} –≠–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ç–µ–º
   */
  getThemeManager() {
    return this.themeManager;
  }
  
  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Ç–µ–º—É
   * @returns {Object|null} –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ–∫—É—â–µ–π —Ç–µ–º—ã –∏–ª–∏ null, –µ—Å–ª–∏ —Ç–µ–º–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
   */
  getCurrentTheme() {
    return this.themeManager ? this.themeManager.getCurrentTheme() : null;
  }
  
  /**
   * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–º—É
   * @param {string} id - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–µ–º—ã
   * @returns {boolean} true, –µ—Å–ª–∏ —Ç–µ–º–∞ –±—ã–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
   */
  setTheme(id) {
    return this.themeManager ? this.themeManager.setTheme(id) : false;
  }
  
  /**
   * –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –º–µ–∂–¥—É —Å–≤–µ—Ç–ª–æ–π –∏ —Ç–µ–º–Ω–æ–π —Ç–µ–º–∞–º–∏
   * @returns {boolean} true, –µ—Å–ª–∏ —Ç–µ–º–∞ –±—ã–ª–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∞
   */
  toggleTheme() {
    return this.themeManager ? this.themeManager.toggleTheme() : false;
  }
  
  /**
   * –í–∫–ª—é—á–∞–µ—Ç –∏–ª–∏ –æ—Ç–∫–ª—é—á–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º
   * @param {boolean} enabled - –§–ª–∞–≥ –≤–∫–ª—é—á–µ–Ω–∏—è
   * @returns {ThemeIntegration} –≠–∫–∑–µ–º–ø–ª—è—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä–∞ —Ç–µ–º
   */
  setAutoMode(enabled) {
    if (this.themeManager) {
      this.themeManager.setAutoMode(enabled);
    }
    
    return this;
  }
  
  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
   * @param {Object} config - –ù–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
   * @returns {ThemeIntegration} –≠–∫–∑–µ–º–ø–ª—è—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä–∞ —Ç–µ–º
   */
  updateConfig(config) {
    this.config = { ...this.config, ...config };
    
    if (this.themeManager && config.themeManager) {
      this.themeManager.updateConfig(config.themeManager);
    }
    
    return this;
  }
  
  /**
   * –£–Ω–∏—á—Ç–æ–∂–∞–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä —Ç–µ–º –∏ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã
   */
  destroy() {
    this.logger.info('ThemeIntegration: destroying');
    
    // –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    this.removeEventListeners();
    
    // –£–Ω–∏—á—Ç–æ–∂–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Ç–µ–º
    if (this.themeManager) {
      this.themeManager.destroy();
      this.themeManager = null;
    }
    
    // –û—á–∏—â–∞–µ–º –∫–∞—Ä—Ç—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    this.components.clear();
    
    // –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    if (this.controls && this.controls.container) {
      this.controls.container.innerHTML = '';
    }
    
    this.isInitialized = false;
    
    this.eventEmitter.emit('themeIntegration:destroyed');
    
    this.logger.info('ThemeIntegration: destroyed');
  }
}

module.exports = ThemeIntegration;
